generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  email             String   @unique
  password          String
  name              String
  isActive          Boolean  @default(true)
  canChangePassword Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // OTP for password reset and verification
  otp          String?
  otpExpiresAt DateTime?

  // Refresh token for authentication
  refreshToken String?

  // Profile information
  gender       Gender?
  interestedIn InterestedIn?
  heightFeet   Int?
  heightInches Int?

  // Optional profile information
  birthday           DateTime?
  bio                String?
  relationshipStatus RelationshipStatus?
  language           String[] // Array of languages
  work               String?

  // Location information
  address String?
  city    String?
  state   String?
  zipCode String?

  //Feeling today
  feelingToday Mood[] @default([])

  // Profile picture
  profilePhotoUrl String?

  // Relations
  messages      Message[]
  circleMembers CircleMember[]

  //Friend relationships
  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
  friendships1           Friendship[]    @relation("Friendships1")
  friendships2           Friendship[]    @relation("Friendships2")

  @@map("users")
}

enum Gender {
  women
  men
  nonbinary
}

enum InterestedIn {
  women
  men
  both
}

enum RelationshipStatus {
  single
  in_relationship
  married
  divorced
  widowed
  complicated
}

enum Mood {
  HAPPY
  SAD
  CALM
  BORED
  ROMANTIC
  FRUSTRATED
  STRESSED
  GRATEFUL
  FLIRTY
  ANGRY
}

model Circle {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members  CircleMember[]
  messages Message[]

  @@map("circles")
}

model CircleMember {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId   String   @db.ObjectId
  circleId String   @db.ObjectId
  joinedAt DateTime @default(now())
  isActive Boolean  @default(true)

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  circle Circle @relation(fields: [circleId], references: [id])

  @@unique([userId, circleId])
  @@map("circle_members")
}

model Message {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  content         String?
  messageType     MessageType @default(TEXT)
  voiceMessageUrl String?
  duration        Int?
  userId          String      @db.ObjectId
  circleId        String      @db.ObjectId
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id])
  circle Circle @relation(fields: [circleId], references: [id])

  @@map("messages")
}

enum MessageType {
  TEXT
  VOICE
}

model FriendRequest {
  id              String              @id @default(auto()) @map("_id") @db.ObjectId
  senderId        String              @db.ObjectId
  receiverId      String              @db.ObjectId
  status          FriendRequestStatus @default(PENDING)
  voiceMessageUrl String?
  message         String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  //Relations
  sender   User @relation("SentFriendRequests", fields: [senderId], references: [id])
  receiver User @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Friendship {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId1   String   @db.ObjectId
  userId2   String   @db.ObjectId
  createdAt DateTime @default(now())

  //Relations
  user1 User @relation("Friendships1", fields: [userId1], references: [id])
  user2 User @relation("Friendships2", fields: [userId2], references: [id])

  @@unique([userId1, userId2])
  @@map("friendships")
}
